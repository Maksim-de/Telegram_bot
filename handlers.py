from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import Form, Sport
from api_handler import *
from aiogram.utils.markdown import hbold, hitalic, hunderline, text, code
from config import TOKEN_WEATHER
from datetime import datetime
import io
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

router = Router()

users = {}

food_log = {}
water_log = {}

calorie_burn_rates = {
    "–±–µ–≥": 600,
    "–ø–ª–∞–≤–∞–Ω–∏–µ": 500,
    "—Ö–æ–¥—å–±–∞": 300,
    "–≤–µ–ª–æ—Å–∏–ø–µ–¥": 400,
    "—Å–∏–ª–æ–≤–∞—è": 350,
    "–π–æ–≥–∞": 200,
    "–ø–∏–ª–∞—Ç–µ—Å": 200
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    welcome_text = (
        f"{hbold('üåü –ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫! üèãÔ∏è‚Äç‚ôÄÔ∏è')}\n\n"
        f"{hitalic('–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–∏—Ç–∞–Ω–∏–µ,')}\n"
        f"{hitalic('–∞ —Ç–∞–∫–∂–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.')}\n\n"
        f"{hunderline('–ú–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:')}\n"
        f"‚Ä¢ {hbold('/set_profile')} - {hitalic('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')}\n"
        f"‚Ä¢ {hbold('/get_profile')} - {hitalic('–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è')}\n"
        f"‚Ä¢ {hbold('/log_water')} - {hitalic('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã')}\n"
        f"‚Ä¢ {hbold('/log_food')} - {hitalic('–ó–∞–ø–∏—Å—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ —Å—ä–µ–¥–µ–Ω–Ω–æ–π –ø–∏—â–∏')}\n"
        f"‚Ä¢ {hbold('/log_workout')} - {hitalic('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ')}\n"
        f"‚Ä¢ {hbold('/check_progress')} - {hitalic('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞')}\n"
        f"‚Ä¢ {hbold('/info')} - {hitalic('–ë–æ–ª—å—à–µ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞')}\n\n"
        f"–î–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é.\n"
        f"–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hbold('/set_profile')}"

    )

    await message.answer(welcome_text, parse_mode="HTML")
    # await message.answer_sticker(sticker="CAACAgIAAxkBAAEK7XhlW7jYJ7n9Ym826-0h0w7F8xWk8wACJQoAAgC0uUsjFjL5_7j4rsoE")
    # await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –±–æ—Ç.\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.\n")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
@router.message(Command("info"))
async def cmd_help(message: Message):
    help_text = (
        f"{hbold('‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ ‚ÑπÔ∏è')}\n\n"
        f"{hitalic('–Ø —Ç–≤–æ–π –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ñ–∏—Ç–Ω–µ—Å-–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö! üí™')}\n\n"
        f"{hunderline('–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:')}\n\n"
        f"üèãÔ∏è {hbold('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫')}: \n"
        f"   –ó–∞–ø–∏—Å—ã–≤–∞–π —Å–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n"
        f"   ‚Ä¢ {code('–±–µ–≥')}: 600 –∫–∞–ª/—á–∞—Å\n"
        f"   ‚Ä¢ {code('–ø–ª–∞–≤–∞–Ω–∏–µ')}: 500 –∫–∞–ª/—á–∞—Å\n"
        f"   ‚Ä¢ {code('—Ö–æ–¥—å–±–∞')}: 300 –∫–∞–ª/—á–∞—Å\n"
        f"   ‚Ä¢ {code('–≤–µ–ª–æ—Å–∏–ø–µ–¥')}: 400 –∫–∞–ª/—á–∞—Å\n"
        f"   ‚Ä¢ {code('—Å–∏–ª–æ–≤–∞—è')}: 350 –∫–∞–ª/—á–∞—Å\n"
        f"   ‚Ä¢ {code('–π–æ–≥–∞')}: 200 –∫–∞–ª/—á–∞—Å\n"
        f"   ‚Ä¢ {code('–ø–∏–ª–∞—Ç–µ—Å')}: 200 –∫–∞–ª/—á–∞—Å\n\n"
        f"ü•ó {hbold('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è')}: \n"
        f"   –ó–∞–ø–∏—Å—ã–≤–∞–π —Å–≤–æ—é –µ–¥—É –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞–ª–æ—Ä–∏–π. \n"
        f"   –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"   '/log_food '–Ω–∞–∑–≤–∞–Ω–∏–µ –µ–¥—ã' '–≤–µ—Å'\n\n"
        f"üíß {hbold('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–¥—ã')}:\n"
        f"    –°–ª–µ–¥–∏ –∑–∞ —Å–≤–æ–∏–º –≤–æ–¥–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º. \n"
        f"    –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"    /log_water '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –≤ –º–ª'\n\n"
        f"üìä {hbold('–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞')}: \n"
        f"   –û—Ç—Å–ª–µ–∂–∏–≤–∞–π —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É '/check_progress'.\n"
        f"   {hitalic('–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —Ç–≤–æ—ë–º –ø—É—Ç–∏ –∫ –∑–¥–æ—Ä–æ–≤—å—é! üå±')}\n"

    )

    await message.answer(help_text, parse_mode="HTML")


# FSM: –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.message(Command("set_profile"))
async def start_form(message: Message, state: FSMContext):
    # await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await message.answer(
        f"üëã {hbold('–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!')} üòä\n\n"
        f"{hitalic('–î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')} üìù",
        parse_mode="HTML"
    )
    user_id = message.from_user.id
    users[user_id] = {}
    await state.set_state(Form.name)

def get_gender_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
            types.InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female"),
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

@router.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    # await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=get_gender_keyboard())
    name = message.text

    await message.answer(
        f"‚ú® {hbold('–û—Ç–ª–∏—á–Ω–æ, ' + name + '!')} ‚ú®\n\n"
        f"{hitalic('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –ø–æ–ª:')} üöª",
        reply_markup=get_gender_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("gender_"))
async def process_gender_callback(query: types.CallbackQuery, state: FSMContext,):
    gender = query.data.split("_")[1]
    if gender == 'male':
        # await query.message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú—É–∂—Å–∫–æ–π")
        await query.message.answer(
            f"üí™ {hbold('–û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –ú—É–∂—Å–∫–æ–π!')} üëç",
            parse_mode="HTML"
        )
        await state.update_data(gender='–ú—É–∂—Å–∫–æ–π')
    else:
        # await query.message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ñ–µ–Ω—Å–∫–∏–π")
        await query.message.answer(
            f"üíÉ {hbold('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –ñ–µ–Ω—Å–∫–∏–π!')} üå∏",
            parse_mode="HTML"
        )
        await state.update_data(gender='–ñ–µ–Ω—Å–∫–∏–π')
    await query.message.edit_reply_markup(reply_markup=None) #–£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    await query.message.answer(
        f"{hitalic('–ò —Ç–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')} üéÇ",
        parse_mode="HTML"
    )  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.set_state(Form.age)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é


@router.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    # await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?")
    await message.answer(f"{hitalic('C–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?')} üèôÔ∏è",
        parse_mode="HTML"
    )
    await state.set_state(Form.city)

@router.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer(f"{hitalic('–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å?')} ‚öñÔ∏è",
        parse_mode="HTML"
    )
    await state.set_state(Form.weight)

@router.message(Form.weight)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(weight=message.text)
    await message.answer(f"{hitalic('–û—Ç–ª–∏—á–Ω–æ! –°–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç?')} üìè",
        parse_mode="HTML"
    )
    await state.set_state(Form.height)

@router.message(Form.height)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(height=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", reply_markup=keyboard_lifesyyle())

def keyboard_lifesyyle():
    buttons = [
        [types.InlineKeyboardButton(text="–°–∏–¥—è—á–∏–π –∏ –º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π", callback_data="sport_1")],
        [types.InlineKeyboardButton(text="–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)",
                                       callback_data="sport_2")],
        [types.InlineKeyboardButton(text="–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)",
                                       callback_data="sport_3")],
        [types.InlineKeyboardButton(text="–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (5-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)",
                                       callback_data="sport_4")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

@router.callback_query(F.data.startswith("sport_"))
async def process_gender_callback(query: types.CallbackQuery, state: FSMContext,):
    sport = query.data.split("_")[1]
    # if sport == '1':
    #     await query.message.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ –°–∏–¥—è—á–∏–π –∏ –º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π")
    #     await state.update_data(lifestyle=1)
    # if sport == '2':
    #     await query.message.reply("–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)")
    #     await state.update_data(lifestyle=2)
    # if sport == '3':
    #     await query.message.reply("–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)")
    #     await state.update_data(lifestyle=3)
    # if sport == '4':
    #     await query.message.reply("–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 5-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)")
    #     await state.update_data(lifestyle=4)
    if sport == '1':
        await query.message.answer(
            f"üßò {hbold('–¢—ã –≤—ã–±—Ä–∞–ª –°–∏–¥—è—á–∏–π –∏ –º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏!')} üõãÔ∏è",
            parse_mode="HTML"
        )
        await state.update_data(lifestyle=1)
    elif sport == '2':
        await query.message.answer(
            f"üö∂ {hbold('–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±—Ä–∞–Ω–∞ –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é)!')} ü§∏",
            parse_mode="HTML"
        )
        await state.update_data(lifestyle=2)
    elif sport == '3':
        await query.message.answer(
            f"üèÉ {hbold('–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, –≤—ã–±—Ä–∞–Ω–∞ –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)!')} üö¥",
            parse_mode="HTML"
        )
        await state.update_data(lifestyle=3)
    elif sport == '4':
        await query.message.answer(
            f"üèãÔ∏è {hbold('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –≤—ã–±—Ä–∞–Ω–∞ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (5-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)!')} üèÜ",
            parse_mode="HTML"
        )
        await state.update_data(lifestyle=4)
    # await query.message.edit_reply_markup(reply_markup=None) #–£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    await query.message.answer(
        f"{hitalic('–ò, –Ω–∞–ø–æ—Å–ª–µ–¥–æ–∫, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å:')}üéØ",
        reply_markup=get_keyboard(),
        parse_mode="HTML"
    )

def get_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="weight_high"),
            types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", callback_data="weight_stogn"),
            types.InlineKeyboardButton(text="–ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="weight_low")
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

@router.callback_query(F.data.startswith("weight_"))
async def callbacks_num(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("name")
    age = float(data.get("age"))
    lifestyle = data.get("lifestyle")
    gender = data.get("gender")
    weight = float(data.get("weight"))
    height = float(data.get("height"))
    city = data.get("city")
    action = callback.data
    if gender == '–ú—É–∂—Å–∫–æ–π':
        target = 88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)
    else:
        target = 447.6 + (9.2 * weight) + (3.1 * height) -(4.3 * age)
    if lifestyle == 1:
        norma = target *1.2
        await state.update_data(norma=norma)
    elif lifestyle == 2:
        norma = target * 1.375
        await state.update_data(norma=norma)
    elif lifestyle == 3:
        norma = target * 1.55
        await state.update_data(norma=norma)
    elif lifestyle == 4:
        norma = target * 1.725
        await state.update_data(norma=norma)
    if action == "weight_high":
        target = norma + 450
        activity = "–ù–∞–±–æ—Ä –≤–µ—Å–∞"
        await state.update_data(activity=activity)
        await state.update_data(target=target)
    elif action == "weight_stogn":
        target = norma
        activity = "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"
        await state.update_data(activity=activity)
        await state.update_data(target=target)
    else:
        target = norma - 450
        activity = "–ü–æ—Ö—É–¥–µ–Ω–∏–µ/—Å—É—à–∫–∞"
        await state.update_data(activity=activity)
        await state.update_data(target=target)
    print(city)
    temp_now = await api_request(TOKEN_WEATHER, city)
    water = weight * 30
    print("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ ", city, temp_now)
    if temp_now > 20:
        water+=500
    await state.update_data(water=water)
    # await callback.message.edit_reply_markup(reply_markup=None)  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    response_text = text(
        f"üë§ {hbold('–ò–º—è:')} {name}\n",
        f"üéÇ {hbold('–í–æ–∑—Ä–∞—Å—Ç:')} {int(age)}\n",
        f"üöª {hbold('–ü–æ–ª:')} {gender}\n",
        f"üìè {hbold('–†–æ—Å—Ç:')} {height} —Å–º\n",
        f"‚öñÔ∏è {hbold('–í–µ—Å:')} {weight} –∫–≥\n",
        f"üéØ {hbold('–í–∞—à–∞ —Ü–µ–ª—å:')} {activity}\n",
        f"üî• {hbold('–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π:')} {int(target)}\n",
        f"üíß {hbold('–¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–¥–∫–æ—Å—Ç–∏:')} {int(water)} –º–ª",
        sep="\n"
    )
    await callback.message.answer(response_text, parse_mode="HTML")
    # await callback.message.answer(response_text)
    user_id = callback.from_user.id
    users[user_id]['name'] = name
    users[user_id]['age'] = age
    users[user_id]['weight'] = weight
    users[user_id]['height'] = height
    users[user_id]['gender'] = gender
    users[user_id]['norma'] = norma
    users[user_id]['activity'] = activity
    users[user_id]['target'] = target
    users[user_id]['water'] = water
    users[user_id]['city'] = city
    users[user_id]['water_now'] = int(0)
    users[user_id]['target_now'] = int(0)
    users[user_id]['burn'] = int(0)
    await state.clear()

@router.message(Command("log_water"))
async def log_water(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if len(message.text.split()) == 1:
        await message.reply(
            f"üíß {hitalic('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö (–º–ª).')}\n"
            f"   {hbold('–ü—Ä–∏–º–µ—Ä:')} /log_water 250",
            parse_mode="HTML"
        )
    else:
        try:
            water_now = int(message.text.split()[1])
            users[user_id]['water_now'] += water_now
            # –î–æ–±–∞–≤–∏–ª–∏
            if 'water_log' not in users[user_id]:
                users[user_id]['water_log'] = []
            users[user_id]['water_log'].append(
                {"time": datetime.now(), "amount": water_now}
            )
            await message.reply(
                 f"‚úÖ {hbold('–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–ø–∏–ª(–∞)')} {hbold(f'{water_now} –º–ª')} üíß\n"
                 f"{hitalic('–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ')} {users[user_id]['water_now']}/{users[user_id]['water']} –º–ª",
                parse_mode="HTML"
                )
        except(ValueError, KeyError):
            await message.reply(
                f"‚ö†Ô∏è {hitalic('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.')}\n"
                f"   {hbold('–ü—Ä–∏–º–µ—Ä:')} /log_water 250",
                parse_mode="HTML"
            )


@router.message(Command("log_food"))
async def log_food(message: Message):
    user_id = message.from_user.id
    mess = message.text
    text_to_translate = mess[9:len(mess)]
    if not text_to_translate:
        await message.reply(
            f"ü•ó {hitalic('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –µ–≥–æ –≤–µ—Å.')}\n"
            f"   {hbold('–ü—Ä–∏–º–µ—Ä:')} /log_food –Ø–±–ª–æ–∫–æ 150 –≥—Ä–∞–º–º",
            parse_mode="HTML"
        )
        return
    calories, totalweight = await caloric(text_to_translate)
    await message.answer(
            f"üçΩÔ∏è {hbold('–ó–∞–ø–∏—Å–∞–Ω–æ!')} {hitalic(text_to_translate)} \n"
            f"   {hbold('–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å:')} {int(calories)} –∫–∫–∞–ª\n"
            f"   {hbold('–í–µ—Å:')} {int(totalweight)} –≥",
             parse_mode="HTML"
        )
    # –î–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    if 'food_log' not in users[user_id]:
        users[user_id]['food_log'] = []
    users[user_id]['food_log'].append(
        {"time": datetime.now(), "calories": calories, "weight": totalweight}
    )
    users[user_id]['target_now'] = users[user_id]['target_now'] + calories
    if users[user_id]['target_now'] < users[user_id]['target']:
        await message.reply(
               f"‚úÖ {hbold('–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:')} {int(users[user_id]['target_now'])}/{int(users[user_id]['target'])} –∫–∫–∞–ª\n"
               f"   {hitalic('–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™')}",
               parse_mode="HTML"
            )
    else:
        await message.reply(
                f"‚ö†Ô∏è {hbold('–í–Ω–∏–º–∞–Ω–∏–µ! –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:')} {int(users[user_id]['target_now'])}/{int(users[user_id]['target'])} –∫–∫–∞–ª\n"
                f"   {hitalic('–ö–∞–∂–µ—Ç—Å—è, –ø–æ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è! üôÖ‚Äç‚ôÇÔ∏è')}",
                parse_mode="HTML"
            )

def create_workout_keyboard():
    buttons = []
    for workout_type in calorie_burn_rates.keys():
        buttons.append([types.InlineKeyboardButton(text=workout_type, callback_data=f"workout_{workout_type}")])
        # buttons.append(types.InlineKeyboardButton(text=workout_type, callback_data=f"workout_{workout_type}"))
    # keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

@router.message(Command("log_workout"))
async def log_sport(message: Message,state: FSMContext):
    keyboard = create_workout_keyboard()
    await message.answer(
        f"{hbold('üèãÔ∏è –í—ã–±–µ—Ä–∏ –≤–∏–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:')}\n\n"
        f"{hitalic('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("workout_"))
async def process_sport_callback(query: types.CallbackQuery, state: FSMContext):
    sport = query.data.split("_")[1]
    await state.set_state(Sport.sport)
    await state.update_data(sport=sport)
    await query.message.reply(
        f"‚è±Ô∏è{hitalic('–£–∫–∞–∂–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö:')}",
        parse_mode="HTML"
    )
    await state.set_state(Sport.time)

@router.message(Sport.time)
async def process_sport(message: Message, state: FSMContext):
    try:
        await state.update_data(time=message.text)
        data = await state.get_data()
        sport = data.get("sport")
        min = message.text
        calories = int(calorie_burn_rates[sport])* (int(min)/60)
        user_id = message.from_user.id
        users[user_id]['burn'] += int(calories)
        await message.reply(
            f"üî• {hbold('–û—Ç–ª–∏—á–Ω–æ, —Ç—ã —Å–∂–µ–≥')} {hbold(f'{int(calories)} –∫–∫–∞–ª')}!\n"
            f"   {hitalic('–°—É–º–º–∞—Ä–Ω–æ —Å–æ–∂–∂–µ–Ω–æ:')} {users[user_id]['burn']} –∫–∫–∞–ª",
            parse_mode="HTML"
        )
        if int(min) > 30:
            users[user_id]['water'] = int(users[user_id]['water']) + 250
            await message.reply(
                f"üî• {hbold('–î–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - –≤—ã–ø–µ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 250 –º–ª –≤–æ–¥—ã')}!\n"
                f"   {hitalic('–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ :')} {users[user_id]['water']} –º–ª",
                parse_mode="HTML"
            )
    except (ValueError, KeyError) as e:
        await message.answer(
            f"‚ö†Ô∏è {hitalic('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏.')}\n"
            f"    {hbold('–ü—Ä–∏–º–µ—Ä:')} 30",
            parse_mode="HTML"
        )
    await state.clear()

@router.message(Command("get_profile"))
async def get_profile(message: Message):
    user_id = message.from_user.id
    name = users[user_id]['name']
    age = users[user_id]['age']
    weight = users[user_id]['weight']
    height = users[user_id]['height']
    gender = users[user_id]['gender']
    norma = users[user_id]['norma']
    activity = users[user_id]['activity']
    target = users[user_id]['target']
    water = users[user_id]['water']
    city = users[user_id]['city']
    water_now = users[user_id]['water_now']
    target_now = users[user_id]['target_now']
    burn = users[user_id]['burn']
    response_text = text(
        f"üë§ {hbold('–ò–º—è:')} {name}\n",
        f"üéÇ {hbold('–í–æ–∑—Ä–∞—Å—Ç:')} {age}\n",
        f"üöª {hbold('–ü–æ–ª:')} {gender}\n",
        f"üìè {hbold('–†–æ—Å—Ç:')} {height} —Å–º\n",
        f"‚öñÔ∏è {hbold('–í–µ—Å:')} {weight} –∫–≥\n",
        f"üéØ {hbold('–í–∞—à–∞ —Ü–µ–ª—å:')} {activity}\n",
        f"üî• {hbold('–¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π:')} {int(target)}\n",
        f"üíß {hbold('–¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–¥–∫–æ—Å—Ç–∏:')} {int(water)} –º–ª\n",
        f"üèôÔ∏è {hbold('–ì–æ—Ä–æ–¥:')} {city}\n",
        f"üíß {hbold('–í—ã–ø–∏—Ç–æ –≤–æ–¥—ã:')} {water_now} –º–ª\n",
        f"üçΩÔ∏è {hbold('–°—ä–µ–¥–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π:')} {int(target_now)} –∫–∫–∞–ª\n",
        f"üèãÔ∏è {hbold('–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π:')} {burn} –∫–∫–∞–ª",
        sep="\n"
    )
    await message.reply(response_text, parse_mode="HTML")

@router.message(Command("check_progress"))
async def check_progress(message: Message):
    user_id = message.from_user.id
    if user_id not in users or not users[user_id]:
        await message.reply(
            f"‚ö†Ô∏è {hitalic('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /set_profile.')}",
            parse_mode="HTML"
        )
        return

    user_data = users[user_id]
    name = user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    norma = user_data.get('norma', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    target = user_data.get('target', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    water = user_data.get('water', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    water_now = user_data.get('water_now', 0)
    target_now = user_data.get('target_now', 0)
    burn = user_data.get('burn', 0)
    activity = user_data.get('activity', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')

    if water != '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' and int(water) > 0:
        water_percentage = (water_now / int(water)) * 100
    else:
        water_percentage = 0

    if target != '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' and float(target) > 0:
        target_percentage = (target_now / float(target)) * 100
    else:
        target_percentage = 0
    response_text = text(
        f"üìä {hbold('–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, ' + name + '!')}\n\n",
        f"üéØ {hbold('–¢–≤–æ—è —Ü–µ–ª—å:')} {activity}\n",
        f"üî• {hbold('–¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º:')} {int(target)} –∫–∫–∞–ª\n",
        f"üíß {hbold('–ù–æ—Ä–º–∞ –≤–æ–¥—ã:')} {int(water)} –º–ª\n",
        f"üíß {hbold('–í—ã–ø–∏—Ç–æ –≤–æ–¥—ã:')} {water_now} –º–ª ({water_percentage:.1f}%)\n",
        f"üçΩÔ∏è {hbold('–°—ä–µ–¥–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π:')} {int(target_now)} –∫–∫–∞–ª ({target_percentage:.1f}%)\n",
        f"üèãÔ∏è {hbold('–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π:')} {burn} –∫–∫–∞–ª",
        sep="\n"
    )
    await message.reply(response_text, parse_mode="HTML")

@router.message(Command("get_chart"))
async def check_progress(message: Message):
    user_id = message.from_user.id
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    buf = await plot_daily_progress(user_id)
    if buf:
        await message.answer_photo(
            photo=types.BufferedInputFile(buf.read(), filename="daily_progress.png")
        )
    else:
        await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")


def get_water_log(user_id):
    if user_id in users and 'water_log' in users[user_id]:
        return users[user_id]['water_log']
    else:
        return []

def get_food_log(user_id):
    if user_id in users and 'food_log' in users[user_id]:
        return users[user_id]['food_log']
    else:
        return []



async def plot_daily_progress(user_id):
    water_log = get_water_log(user_id)
    food_log = get_food_log(user_id)

    if not water_log and not food_log:
        return None

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.now().date()

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    water_times = []
    water_amounts = []
    cumulative_water = 0
    for log in water_log:
        if isinstance(log, dict) and 'time' in log and 'amount' in log and isinstance(log['amount'], (int, float)):
             if log['time'].date() == today:
                cumulative_water += log['amount']
                water_times.append(log['time'])
                water_amounts.append(cumulative_water)
             else:
                 print(f"Warning: Invalid water log entry: {log}")


    food_times = []
    food_calories = []
    cumulative_calories = 0
    for log in food_log:
        if isinstance(log, dict) and 'time' in log and 'calories' in log and isinstance(log['calories'], (int, float)):
             if log['time'].date() == today:
                cumulative_calories += log['calories']
                food_times.append(log['time'])
                food_calories.append(cumulative_calories)
        else:
            print(f"Warning: Invalid food log entry: {log}")


    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –∏ –æ—Å—å
    fig, ax = plt.subplots(figsize=(10, 6))

    # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤–æ–¥—ã
    if water_times:
        ax.plot(water_times, water_amounts, color='blue', label='–í–æ–¥–∞ (–º–ª)')

    # –ì—Ä–∞—Ñ–∏–∫ –¥–ª—è –∫–∞–ª–æ—Ä–∏–π
    if food_times:
        ax.plot(food_times, food_calories, color='red', label='–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)')


    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X
    ax.xaxis.set_major_locator(mdates.HourLocator(interval=2))
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
    ax.set_xlabel('–í—Ä–µ–º—è (—á–∞—Å—ã)')
    ax.tick_params(axis='x', rotation=45)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –ª–µ–≥–µ–Ω–¥—É
    ax.legend(loc='upper left')

    # –ó–∞–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    start_of_day = datetime.combine(today, datetime.min.time())
    end_of_day = datetime.combine(today, datetime.max.time())
    ax.set_xlim(start_of_day, end_of_day)
    ax.set_ylabel('–°—É–º–º–∞ –≤–æ–¥—ã (–º–ª) / –°—É–º–º–∞ –∫–∞–ª–æ—Ä–∏–π (–∫–∫–∞–ª)')
    fig.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä –ø–∞–º—è—Ç–∏
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close(fig)

    return buf

@router.message(Command("new_day"))
async def new_day(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
          await message.reply(
            f"‚ö†Ô∏è {hitalic('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /set_profile.')}",
            parse_mode="HTML"
        )
          return
    users[user_id]['water_now'] = 0
    users[user_id]['target_now'] = 0
    users[user_id]['burn'] = 0
    weight = users[user_id]['weight']
    city = users[user_id]['city']
    temp_now = await api_request(TOKEN_WEATHER, city)
    water = weight * 30
    print("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ ", city, temp_now)
    if temp_now > 20:
        water += 500
    users[user_id]['water'] = water

    await message.reply(
        f"‚úÖ {hbold('–í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –æ–±–Ω—É–ª–µ–Ω—ã! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º —Å–≤–µ—Ä—à–µ–Ω–∏—è–º!')}",
        parse_mode="HTML"
    )